PROJECT(PointsCloud)
cmake_minimum_required(VERSION 2.8)
add_compile_options(-Wall -g -O)
#set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} -no-pie)
#生成可执行程序
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=c++11)
set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} -std=c99)
#add_subdirectory(./src/Math)

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
add_compile_options(-lstdc++)
link_libraries(glfw3 GL Xrandr Xi X11 Xxf86vm pthread  Xinerama Xcursor m dl )
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
add_compile_options(-static-libstdc++ -static-libgcc)
link_libraries(m glfw3 opengl32)
endif(CMAKE_SYSTEM_NAME MATCHES "Linux")
include_directories(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/thirdpart/libcell1.0/include ${PROJECT_SOURCE_DIR}/thirdpart/Viewer1.0/include ${PROJECT_SOURCE_DIR}/thirdpart/glad/include ${PROJECT_SOURCE_DIR}/thirdpart/cstructures/include)
link_directories(${PROJECT_SOURCE_DIR}/lib ${PROJECT_SOURCE_DIR}/temp_libs )
aux_source_directory(${PROJECT_SOURCE_DIR}/Demo mysrc)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/temp_libs)
link_libraries(m  )
add_subdirectory(./src)
add_executable(main ${mysrc})
target_link_libraries(main  -Wl,--start-group  glfw3 points_cloud cstructures cstruct_iterator libcell viewer m -Wl,--end-group)
